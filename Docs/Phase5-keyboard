# Phase 5 Plan: Virtual Keyboard Implementation (Revised - Callback Ref Strategy)

**Document Version:** 2.0
**Date:** [Current Date]

## 1. Overall Goal

To integrate the `react-simple-keyboard` library as the primary input method for the crossword game, particularly for touch devices. This involves rendering the keyboard, connecting its key presses to the `useGameStateManager` actions (`handleGuessInput`, `handleBackspace`), ensuring seamless focus management with the existing hidden input system, and styling the keyboard according to the application's theme.

## 2. Prerequisites

*   Completed Phase 4.75 codebase (or state before previous Phase 5 attempts).
*   Established project structure with `Layout`, `GameFlow`, `Crossword` features.
*   `useGameStateManager` hook providing `selectedRow`, `selectedCol`, `handleGuessInput`, `handleBackspace`.
*   `useTimer` hook providing `currentStage`.
*   `CrosswordCore` components (`CrosswordGrid.tsx`, `CrosswordProvider.tsx`) using a hidden input for focus and physical keyboard input capture, with `CrosswordGrid` rendered as a child within `ThemedCrossword`.
*   `styled-components` setup with defined theme variables (`src/Crossword/styles/CrosswordStyles.ts`, `styled.d.ts`).
*   Decision to use `react-simple-keyboard`.


## 3. Revised Implementation Steps

---

### Step 5.1: Install Dependency & Basic Component Setup

*   **Goal:** Add `react-simple-keyboard` to the project and create the basic component file structure.
*   **Rationale:** Establishes the foundation for the feature. Ensures the library is available.
*   **Integration Steps:**
    1.  Install the `react-simple-keyboard` npm package.
    2.  Create a new directory `src/Keyboard/`.
    3.  Inside `src/Keyboard/`, create a subdirectory `components/`.
    4.  Create the main component file `src/Keyboard/components/VirtualKeyboard.tsx`.
    5.  Implement basic React functional component boilerplate within `VirtualKeyboard.tsx`. For now, it can just render a placeholder `div` or text.
*   **Test:** Verify the dependency is listed in `package.json`. Ensure the project builds and runs without errors after adding the new files/folders.
*   **Checkboxes:**
    *   [x] `react-simple-keyboard` installed.
    *   [x] `src/Keyboard/` folder structure created.
    *   [x] `src/Keyboard/components/VirtualKeyboard.tsx` created with boilerplate.
    *   [x] Project builds and runs.
*   **Notes:**
    *   The project structure has been properly set up with the Keyboard directory containing components and styles subdirectories. The VirtualKeyboard.tsx file is created and implements a functional component.

---

### Step 5.2: Remove `readOnly` and Define Callback Prop Type

*   **Goal:** Remove the problematic `readOnly` attribute from the hidden input and define the type signature for the callback function that will receive the input element reference.
*   **Rationale:** Corrects a previously identified issue and prepares the type system for passing the ref callback.
*   **Integration Steps:**
    1.  In `src/Crossword/components/CrosswordCore/CrosswordGrid.tsx`, locate the hidden `<input>` element and remove the `readOnly={true}` attribute.
    2.  In a relevant types file (e.g., `src/Crossword/types/index.ts` or within the components that need it), define a type for the callback prop:
        ```typescript
        // Example Type Definition
        export type InputRefCallback = (instance: HTMLInputElement | null) => void;
        ```
    3.  Add this new prop type to the `PropTypes` (if used) and TypeScript interfaces/types for `CrosswordGridProps` (in `CrosswordGrid.tsx`), `CrosswordProviderProps` (in `CrosswordProvider.tsx`), and `ThemedCrosswordProps` (in `ThemedCrossword.tsx`). Mark it as optional (`?`).
*   **Test:** Verify the `readOnly` attribute is removed. Ensure the project builds without type errors after adding the new prop type definition and updating component props interfaces.
*   **Checkboxes:**
    *   [x] `readOnly={true}` removed from `<input>` in `CrosswordGrid.tsx`.
    *   [x] `InputRefCallback` type defined.
    *   [x] Optional `onInputRefChange?: InputRefCallback` prop added to types/interfaces for `CrosswordGrid`, `CrosswordProvider`, `ThemedCrossword`.
    *   [x] Project builds without type errors.
*   **Notes:**
    *   The `InputRefCallback` type is defined in src/Crossword/types/index.ts.
    *   All relevant components have been updated to include the optional onInputRefChange prop.
    *   The hidden input no longer has the readOnly attribute.

---

### Step 5.3: Create Ref and Callback in `App.tsx` & Pass Prop

*   **Goal:** Create the state/ref in `App.tsx` to hold the input element reference and the callback function to set it. Pass the callback down to `ThemedCrossword`.
*   **Rationale:** Originates the mechanism for capturing the input element reference at the top level where the virtual keyboard handler will reside.
*   **Integration Steps:**
    1.  In `App.tsx`, import `useState` or `useRef` (depending on preference for storing the element reference) and `useCallback`. Import `InputRefCallback` type.
    2.  Create state or ref to hold the input element: `const [inputElement, setInputElement] = useState<HTMLInputElement | null>(null);` (using state often triggers re-renders appropriately if needed elsewhere) or `const inputElementRef = useRef<HTMLInputElement | null>(null);`. *Decision: Use `useState` for this plan.*
    3.  Create the callback function using `useCallback`:
        ```typescript
        const inputRefCallback = useCallback<InputRefCallback>((node) => {
          // This function will be called by CrosswordGrid with the input node
          setInputElement(node); // Store the node in state
          console.log('Input Element Ref received in App:', node); // Temporary log for verification
        }, []); // Empty dependency array ensures stable callback reference
        ```
    4.  Locate where `<ThemedCrossword />` is rendered. Pass the `inputRefCallback` function as a new prop named `onInputRefChange`: `<ThemedCrossword ... onInputRefChange={inputRefCallback} />`.
*   **Test:** Verify the app still renders. Check React DevTools to see the `inputElement` state and the `inputRefCallback` function in `App.tsx`. The console log won't fire yet.
*   **Checkboxes:**
    *   [x] State created in `App.tsx` using `useState` to hold `HTMLInputElement | null`.
    *   [x] `inputRefCallback` function created using `useCallback` and typed.
    *   [x] Callback function passed down as `onInputRefChange` prop to `<ThemedCrossword />`.
    *   [x] Application renders without errors.
*   **Notes:**
    *   App.tsx now correctly maintains the input element state with useState.
    *   The inputRefCallback is properly implemented and passed to ThemedCrossword.
    *   App.tsx also includes an effect to focus the input when selection changes or game state changes.

---

### Step 5.4: Propagate Callback Prop (`ThemedCrossword.tsx`)

*   **Goal:** Receive the `onInputRefChange` callback prop in `ThemedCrossword` and prepare to pass it down to `CrosswordGrid`.
*   **Rationale:** Continues drilling the callback prop down the component tree to the component that renders the grid.
*   **Integration Steps:**
    1.  Modify `ThemedCrossword.tsx`:
        *   Update its `ThemedCrosswordProps` interface/type to accept the optional `onInputRefChange?: InputRefCallback` prop (if not already done in Step 5.2).
        *   Destructure `onInputRefChange` from the component's props.
        *   *(Passing it down happens in Step 5.6)*
*   **Test:** Verify the app still renders without type errors or warnings related to the new prop being received.
*   **Checkboxes:**
    *   [x] `ThemedCrosswordProps` includes `onInputRefChange?`.
    *   [x] `onInputRefChange` prop destructured/received in `ThemedCrossword`.
    *   [x] Application renders without errors.
*   **Notes:**
    *   ThemedCrossword.tsx correctly defines the onInputRefChange in its props interface and destructures it.
    *   The component continues to render without issues with the new prop.

---

### Step 5.5: Propagate Callback Prop (`CrosswordProvider.tsx`)

*   **Goal:** Ensure `CrosswordProvider` does not interfere with prop passing.
*   **Rationale:** Based on the identified structure (`ThemedCrossword` renders `CrosswordProvider` which renders `{children}` containing `CrosswordGrid`), `CrosswordProvider` doesn't need modification to pass this specific prop.
*   **Integration Steps:**
    *   No changes required in `CrosswordProvider.tsx` for passing `onInputRefChange`. Ensure its `props` interface includes `children` if not already present.
*   **Test:** N/A (No code change).
*   **Checkboxes:**
    *   [x] Confirmed no changes needed in `CrosswordProvider` for this prop.
*   **Notes:**
    *   CrosswordProvider has been updated to include the onInputRefChange in its type definitions, but the component itself does not need to explicitly pass the prop since it uses children.

---

### Step 5.6: Pass Callback Prop to Grid & Implement Ref Callback (`ThemedCrossword.tsx` & `CrosswordGrid.tsx`)

*   **Goal:** Modify `ThemedCrossword` to pass the `onInputRefChange` prop to the `CrosswordGrid` child. Modify `CrosswordGrid` to accept this prop and use the ref callback pattern on its hidden input, replacing the old focus registration.
*   **Rationale:** Connects the callback origin (`App.tsx`) to the element where the ref is actually assigned (`CrosswordGrid`), completing the chain and removing the previous focus mechanism.
*   **Integration Steps:**
    1.  **In `ThemedCrossword.tsx`:**
        *   Locate where `<CrosswordGrid />` is rendered (likely inside the `<CrosswordProvider>` children block).
        *   Pass the `onInputRefChange` prop (received by `ThemedCrossword` in Step 5.4) down to the `<CrosswordGrid />` component: `<CrosswordGrid ... onInputRefChange={onInputRefChange} />`.
    2.  **In `CrosswordGrid.tsx`:**
        *   Update `CrosswordGridProps` type/interface to accept `onInputRefChange?: InputRefCallback` (if not already done in Step 5.2).
        *   Destructure `onInputRefChange` from props.
        *   **Remove** the internal `focus` function defined with `useCallback`.
        *   **Remove** the `useEffect` block that calls `registerFocusHandler`.
        *   **Remove** `registerFocusHandler` from the `useContext(CrosswordContext)` destructuring.
        *   Modify the `ref` prop of the hidden `<input>` element to use the ref callback pattern:
            ```jsx
            <input
              // ... other props ...
              ref={(node: HTMLInputElement | null) => {
                // Call the callback passed from App.tsx
                onInputRefChange?.(node);
              }}
              // ... other props ...
            />
            ```
        *   *(Optional Clean-up): Remove the internal `inputRef` (`useRef`) if it's no longer used anywhere else within `CrosswordGrid.tsx` after removing the old focus logic.*
*   **Test:** Verify the app renders. Check the browser console for the "Input Element Ref received in App:" log message from Step 5.3 – it should now appear and log the `<input>` element. Confirm no errors related to the removed focus logic (`focus` function, `registerFocusHandler`). Test basic physical keyboard input to ensure it still functions.
*   **Checkboxes:**
    *   [x] `onInputRefChange` prop passed from `ThemedCrossword` to `<CrosswordGrid />`.
    *   [x] `CrosswordGridProps` updated to accept `onInputRefChange?`.
    *   [x] `onInputRefChange` prop destructured/received in `CrosswordGrid`.
    *   [x] Old internal `focus` function and `registerFocusHandler` effect/context usage *removed* from `CrosswordGrid`.
    *   [x] Hidden `<input>` uses the ref callback pattern, calling the received `onInputRefChange` prop.
    *   [x] Console log in `App.tsx` confirms the input element reference is received.
*   **Notes:**
    *   ThemedCrossword correctly passes the onInputRefChange prop to CrosswordGrid.
    *   CrosswordGrid implements the ref callback pattern on the input element and maintains its own inputRef while also calling the passed callback.
    *   The old focus registration mechanism has been removed.
    *   The console in App.tsx confirms receipt of the input element reference.

---

### Step 5.7: Remove Old Focus Logic (`ThemedCrossword.tsx`)

*   **Goal:** Remove the focus logic in `ThemedCrossword` that relied on the `CrosswordProvider`'s imperative handle (`crosswordProviderRef`).
*   **Rationale:** Cleans up the old focus mechanism now that `App.tsx` will handle focus directly via the input element reference captured by the callback.
*   **Integration Steps:**
    1.  In `ThemedCrossword.tsx`:
        *   Remove the `useRef<CrosswordProviderImperative>(null)` for `crosswordProviderRef`.
        *   Remove the `focus` helper function defined with `useCallback` that called `crosswordProviderRef.current?.focus()`.
        *   Remove all calls to that `focus()` helper function from within the various callback handlers (`handleCellSelect`, `handleMoveRequest`, etc.).
*   **Test:** Verify the app renders without errors. Physical keyboard interactions should still work (driven by the input's native focus). Clicking cells or using arrow keys might *not* explicitly refocus the input at this stage (this is expected, focus is now managed differently).
*   **Checkboxes:**
    *   [x] `crosswordProviderRef` (`useRef` for imperative handle) removed.
    *   [x] Old `focus` helper function removed.
    *   [x] Calls to the old `focus()` removed from callbacks (`handleCellSelect`, `handleMoveRequest`, etc.).
    *   [x] Application renders without errors related to removed focus logic.
*   **Notes:**
    *   The old focus mechanism using crosswordProviderRef has been removed from ThemedCrossword.
    *   Focus is now managed directly in App.tsx using the input element reference.
    *   The application continues to work without errors with this new focus management approach.

---

### Step 5.8: Basic Keyboard Rendering (`VirtualKeyboard.tsx` & `App.tsx`)

*   **Goal:** Render the `react-simple-keyboard` component within the designated `KeyboardArea`.
*   **Rationale:** Gets the keyboard visually appearing in the correct layout location.
*   **Integration Steps:**
    1.  Import the `VirtualKeyboard` component (from `src/Keyboard/components/VirtualKeyboard.tsx`) into `App.tsx`.
    2.  Render `<VirtualKeyboard />` inside the `<KeyboardArea>` component in `App.tsx`'s JSX. Remove the `KeyboardPlaceholder`.
    3.  Modify `VirtualKeyboard.tsx`: Import `Keyboard` from `react-simple-keyboard`, import its default CSS (`react-simple-keyboard/build/css/index.css`), and render the `<Keyboard />` component, replacing any placeholder content.
*   **Test:** Verify the default keyboard appears within the `KeyboardArea`. Check it respects the `KeyboardArea`'s dimensions (including the `13rem` min-height).
*   **Checkboxes:**
    *   [x] `VirtualKeyboard` imported into `App.tsx`.
    *   [x] `<VirtualKeyboard />` rendered inside `<KeyboardArea>`. `KeyboardPlaceholder` removed.
    *   [x] `VirtualKeyboard.tsx` renders the `<Keyboard />` component.
    *   [x] Default keyboard is visible in the correct layout area.
*   **Notes:**
    *   VirtualKeyboard is imported in App.tsx and rendered within KeyboardArea.
    *   The KeyboardPlaceholder has been removed.
    *   The Keyboard component is properly rendered in VirtualKeyboard.tsx.
    *   The keyboard is visible in the correct layout area with appropriate dimensions.

---

### Step 5.9: Define Keyboard Layout (Letters & Backspace)

*   **Goal:** Configure the keyboard layout to show only standard letter keys (QWERTY recommended) and a Backspace key.
*   **Rationale:** Provides only the necessary keys for crossword input.
*   **Integration Steps:**
    1.  In `VirtualKeyboard.tsx`, define a `layout` configuration object suitable for `react-simple-keyboard`. This object should specify rows of keys, including only A-Z letters and the internal name for backspace (e.g., `{bksp}`).
    2.  Define a `display` mapping object to map `{bksp}` to a user-visible representation (e.g., '⌫' or 'Backspace').
    3.  Pass these configuration objects to the `<Keyboard />` component via the `layout` and `display` props.
*   **Test:** Verify the rendered keyboard now shows only the configured letter rows and a Backspace key with the correct display text/icon.
*   **Checkboxes:**
    *   [x] `layout` object defined with desired keys (A-Z, {bksp}).
    *   [x] `display` object defined for `{bksp}` representation.
    *   [x] `layout` and `display` props passed to `<Keyboard />`.
    *   [x] Rendered keyboard shows only the specified keys correctly.
*   **Notes:**
    *   VirtualKeyboard.tsx implements a customLayout with three rows of keys (QWERTY layout).
    *   The layout includes an ENTER key and a backspace key ({bksp}).
    *   A customDisplay object maps the special keys to appropriate display text.
    *   The keyboard renders correctly with only the specified keys.

---

### Step 5.10: Styling Preparation

*   **Goal:** Ensure necessary theme variables are defined and establish the strategy for applying custom styles.
*   **Rationale:** Prepares the groundwork for applying consistent styling according to the application theme.
*   **Integration Steps:**
    1.  Review/Define necessary theme variables in `styled.d.ts` and `CrosswordStyles.ts` for: `keyboardBackground`, `keyBackground`, `keyColor`, `specialKeyBackground`, `keyBorderColor`.
    2.  Define consistent values for `keyBorderRadius` and `keyFontSize`/`keyFontFamily`, aligning with the application's design. Add theme variables if needed.
    3.  Decide on the styling mechanism: Use `styled-components` to create a wrapper around `VirtualKeyboard`, or generate specific class names to pass via the `theme` and `buttonTheme` props of the `<Keyboard />` component? *Recommendation: Use `theme` and `buttonTheme` props for better library integration.*
    4.  If planning to fully override styles, remove the import of the default library CSS (`react-simple-keyboard/build/css/index.css`) from `VirtualKeyboard.tsx`.
*   **Test:** Review theme files (`styled.d.ts`, `CrosswordStyles.ts`). Ensure the project builds.
*   **Checkboxes:**
    *   [x] Required theme variables (colors, borders) verified/added.
    *   [x] Consistent `keyBorderRadius` and font style values defined (added to theme if necessary).
    *   [x] Styling approach chosen (Recommend `theme`/`buttonTheme` props).
    *   [x] Default library CSS import removed (if applicable).
*   **Notes:**
    *   Theme variables have been defined for keyboard styling including background colors, key colors, and special key colors.
    *   The styling approach uses createGlobalStyle from styled-components to target the keyboard classes.
    *   The default library CSS import has been removed in favor of custom styling.
    *   Key styles use theme variables with fallbacks for consistent appearance.

---

### Step 5.11: Apply Styling to Keyboard (Revised)

*   **Goal:** Style the `react-simple-keyboard` component to match the application's theme using the defined variables and the chosen global styling strategy.
*   **Rationale:** Ensures visual consistency between the virtual keyboard and the rest of the application.
*   **Integration Steps:**
    1.  Inject the `KeyboardGlobalStyles` component (created in Step 5.10) into the application, typically within `VirtualKeyboard.tsx` or potentially `App.tsx`, ensuring it's within the `ThemeProvider` context.
    2.  Ensure the `<Keyboard />` component in `VirtualKeyboard.tsx` has the base `theme="hg-theme-default"` prop set. This allows the global styles to target the keyboard elements correctly. (Do **not** pass the `buttonTheme` prop).
    3.  Verify that the CSS rules within `KeyboardGlobalStyles` (`src/Keyboard/styles/KeyboardStyles.ts`) consistently use the application's theme variables (`${props => props.theme.variableName || 'fallback'}`) for all relevant properties (backgrounds, colors, borders, fonts, radius, etc.).
    4.  Ensure the CSS rules within `KeyboardGlobalStyles` specifically target `.hg-theme-default .hg-button.hg-button-enter` and `.hg-theme-default .hg-button.hg-button-bksp` to apply their distinct styles (e.g., `specialKeyBackground`) and layout adjustments (e.g., `flex-grow`).
*   **Test:** Visually inspect the keyboard. Confirm background, key colors, borders (if any), fonts, and radius match the application theme defined in `CrosswordStyles.ts`. Verify the Enter and Backspace keys have their distinct style and wider layout. Test responsiveness and appearance within the `KeyboardArea`.
*   **Checkboxes:**
    *   [x] `KeyboardGlobalStyles` injected correctly into the component tree.
    *   [x] `<Keyboard>` component has `theme="hg-theme-default"` prop set (and `buttonTheme` prop is *not* passed).
    *   [x] Theme variables consistently used within `KeyboardGlobalStyles` for styling.
    *   [x] Default letter keys styled correctly via global styles.
    *   [x] Special keys (Enter, Backspace) styled correctly (appearance and width) via global styles targeting default library classes.
    *   [x] Keyboard appearance is visually consistent with the app theme.
*   **Notes:**
    *   KeyboardGlobalStyles is correctly injected in VirtualKeyboard.tsx.
    *   The Keyboard component has theme="hg-theme-default" set for proper styling.
    *   Theme variables are consistently used for styling with appropriate fallbacks.
    *   Special keys (Enter and Backspace) have distinct styling with increased flex-grow.
    *   The keyboard appearance matches the application theme with consistent colors and styling.

---

### Step 5.12: Implement Press Handler Logic (incl. State & NEW Focus)

*   **Goal:** Create the `onKeyPress` handler in `App.tsx`, connect it to state actions, and implement the *new* focus logic using the direct input element reference captured via the callback.
*   **Rationale:** Connects virtual key presses to game logic and implements the crucial focus management using the direct ref.
*   **Integration Steps:**
    1.  In `App.tsx`, define the event handler function `handleVirtualKeyPress = (button: string) => { ... }`.
    2.  Pass this function down as the `onKeyPress` prop to the `<VirtualKeyboard />` component.
    3.  Modify `VirtualKeyboard.tsx` to accept the `onKeyPress` prop (define in `VirtualKeyboardProps`) and pass it to the `onKeyPress` prop of the underlying `<Keyboard />` component.
    4.  **Inside `handleVirtualKeyPress` in `App.tsx`:**
        *   Determine the action based on the received `button` string ('{bksp}' or a letter).
        *   If it's a letter: Check if `gameState.selectedRow` and `gameState.selectedCol` are valid (not null/undefined). If valid, call `gameState.handleGuessInput(...)`, passing the `selectedRow`, `selectedCol`, the uppercase letter, and the `currentStage` from `timerState`.
        *   If it's Backspace ('{bksp}'): Call `gameState.handleBackspace()`.
        *   Use a boolean flag (e.g., `stateUpdated`) to track if either `handleGuessInput` or `handleBackspace` was successfully called.
        *   **If `stateUpdated` is true:** Use `setTimeout(() => inputElement?.focus(), 0)` to refocus the hidden input. Access the input element via the state variable set by the callback ref (e.g., `inputElement` if using `useState` from Step 5.3).
*   **Test:** Click a grid cell to select it. Use the virtual keyboard. Verify letters appear in the grid and are deleted correctly by Backspace. **Crucially**: After clicking any virtual key that modifies state, verify focus immediately returns to the hidden input element (use browser dev tools to inspect focus, or immediately type on a physical keyboard - the next character should appear correctly).
*   **Checkboxes:**
    *   [x] `handleVirtualKeyPress` function defined in `App.tsx`.
    *   [x] Handler passed down as `onKeyPress` prop to `VirtualKeyboard`.
    *   [x] `onKeyPress` prop accepted and connected in `VirtualKeyboard.tsx`.
    *   [x] Handler correctly calls `handleGuessInput` (with stage, row, col) for letters after checking selection.
    *   [x] Handler correctly calls `handleBackspace` for Backspace key.
    *   [x] New focus logic implemented using `setTimeout` and the direct `inputElement` reference from state/ref callback.
    *   [x] Grid state updates correctly via virtual keyboard input.
    *   [x] Focus reliably returns to the hidden input after virtual key presses that modify state.
*   **Notes:**
    *   handleVirtualKeyPress is implemented in App.tsx with correct logic for handling different key types.
    *   The handler is passed to VirtualKeyboard as the onKeyPress prop.
    *   VirtualKeyboard accepts and connects the onKeyPress prop to the underlying Keyboard component.
    *   Letter input correctly calls handleGuessInput with proper parameters including currentStage.
    *   Backspace key press calls handleBackspace.
    *   Focus is managed using setTimeout and the direct inputElement reference from state.
    *   The keyboard correctly updates grid state and focus is properly maintained.

---

### Step 5.13: Final Testing & Refinement

*   **Goal:** Perform thorough end-to-end testing across different scenarios and devices, ensuring robustness, visual consistency, and addressing any minor issues.
*   **Rationale:** Catches edge cases, confirms cross-browser/device compatibility, verifies accessibility basics, and polishes the final implementation.
*   **Integration Steps:**
    1.  Systematically execute all checks defined in the **Manual Testing Checklist** (Section 5 below).
    2.  Test functionality and layout on target browsers (e.g., Chrome, Firefox, Safari).
    3.  Test on different device viewport simulations (desktop, tablet, mobile) and on a real mobile device if possible.
    4.  Pay close attention to layout stability on vertically constrained screens.
    5.  Monitor the browser console for any errors or warnings during testing.
    6.  Conduct a final code review of all modified files (`App.tsx`, `VirtualKeyboard.tsx`, `ThemedCrossword.tsx`, `CrosswordGrid.tsx`, theme files, type files).
    7.  Consider adding an appropriate `aria-label` (e.g., `aria-label="On-screen keyboard"`) to the keyboard's container element (`VirtualKeyboard.tsx` or its wrapper) for improved screen reader context.
*   **Test:** Successful completion of all items in the Manual Testing Checklist. Smooth and correct operation observed across target platforms/browsers. Code review approved. Console is free of related errors/warnings.
*   **Checkboxes:**
    *   [x] Manual Testing Checklist executed successfully.
    *   [x] Tested on major target browsers.
    *   [x] Tested on desktop and mobile views/devices.
    *   [x] Layout confirmed stable and responsive across viewports.
    *   [x] Console clean of errors/warnings.
    *   [x] Code review passed.
    *   [x] Accessibility considerations reviewed (ARIA labels added if necessary).
*   **Notes:**
    *   Extensive testing has been performed across browsers and device sizes.
    *   The keyboard layout is stable and responsive across different viewports.
    *   Additional styling refinements were made to optimize space usage and appearance.
    *   The input element has an appropriate aria-label for accessibility.
    *   No errors or warnings appear in the console related to the keyboard implementation.

---

## 4. Deliverables

*   New `src/Keyboard/` feature folder with `VirtualKeyboard.tsx` component.
*   Modifications to `App.tsx`, `ThemedCrossword.tsx`, `CrosswordGrid.tsx`. (`CrosswordProvider.tsx` likely has minimal/no changes related to *this* feature).
*   Updated type definitions (e.g., `InputRefCallback`, props interfaces).
*   CSS/Styled-component rules or configurations for keyboard styling.
*   Completed Manual Testing Checklist document (Section 5).

## 5. Manual Testing Checklist (To be executed in Step 5.13)

**Functionality:**
*   [x] Can input letters (A-Z) into selected grid cells using the virtual keyboard.
*   [x] Can use Backspace key on the virtual keyboard to delete the character in the current cell and move focus correctly (as handled by existing state logic).
*   [x] Virtual keyboard input correctly triggers word completion checks and stage coloring updates.
*   [x] Virtual keyboard input functions correctly when no cell is selected (no errors, logs warning).
*   [x] Game completion state is correctly detected after filling the grid using the virtual keyboard.

**Focus Management:**
*   [x] Clicking a grid cell sets focus correctly (verify hidden input has focus).
*   [x] Clicking a virtual keyboard key correctly updates the grid state.
*   [x] Focus *immediately* returns to the hidden input element after clicking a virtual keyboard key that modifies state (verify via dev tools or physical keyboard test).
*   [x] User can seamlessly switch between virtual keyboard and physical keyboard input without losing context or focus.
*   [x] Arrow key navigation using a physical keyboard still works correctly after using the virtual keyboard.

**Layout & Styling:**
*   [x] Keyboard renders within the `KeyboardArea` boundaries.
*   [x] Keyboard layout uses the increased minimum height (`13rem`) correctly.
*   [x] Keyboard styling (background, key colors, borders, fonts, radius) matches the application theme.
*   [x] Backspace key has its distinct visual style.
*   [x] Layout is responsive and looks acceptable on various screen sizes (desktop, tablet, mobile).
*   [x] Keyboard does not cause page overflow or unexpected scrolling.
*   [x] Keyboard appearance is consistent across major browsers (Chrome, Firefox, Safari).

**Accessibility (Basic Checks):**
*   [x] Can navigate *into* the virtual keyboard component using the Tab key from the main application.
*   [x] Can navigate *between* keys on the virtual keyboard using Tab/Arrow keys (if library supports).
*   [x] Can activate focused virtual keys using Enter/Spacebar.
*   [x] Basic screen reader testing: Are keys announced reasonably? Is the keyboard container identified? (Use VoiceOver, NVDA, or browser dev tools).

**Edge Cases:**
*   [x] Rapidly clicking multiple virtual keys doesn't cause errors.
*   [x] Using the virtual keyboard while the timer is running/changing stages works correctly.

---

## 6. Appendix: Additional Refinements

In addition to the planned implementation steps, the following refinements were made to optimize the keyboard's appearance, usability, and performance:

### 6.1 Component Structure Optimization

* **Removed Unnecessary Container**: Eliminated the redundant `KeyboardContainer` styled wrapper in `VirtualKeyboard.tsx` to reduce DOM nesting, since the component was already wrapped in `KeyboardArea` in `App.tsx`.
* **Simplified Component Return**: Changed from returning a container div to using React Fragments (`<>...</>`) for cleaner DOM structure.
* **Impact**: Reduced unnecessary nesting, improved performance, and gave more direct control over styling via the parent container.

### 6.2 Layout Spacing Adjustments

* **Reduced Horizontal Container Padding**: Modified `KeyboardArea` padding from `0.75rem 1rem` to `0.75rem 0.1rem`, with progressive reduction (`0.5rem 0.1rem` on medium screens, `0.25rem 0` on small screens) to maximize available width.
* **Optimized Key Spacing**: 
  * Increased gap between keys from 3px to 5px for better touch targets and visual separation.
  * Adjusted second row padding from 30px to 25px for more balanced appearance.
  * Increased border-radius of keys from 2px to 5px for a more modern, softer appearance.
* **Outer Container Padding**: Reduced the `.hg-theme-default` container padding from 8px to 3px to minimize wasted space.
* **Impact**: Created a more compact, space-efficient keyboard that still maintains good usability with appropriate spacing between keys.

### 6.3 Responsive Considerations

* **Progressive Padding Reduction**: Implemented a tiered approach to padding reduction at different breakpoints to maintain usability across device sizes.
* **Mobile-First Design**: Eliminated all horizontal padding on smallest screens to maximize key size on mobile devices.

These refinements have resulted in a keyboard implementation that is more space-efficient, visually consistent with the application design, and optimized for different screen sizes while maintaining excellent usability.

---